/// <reference types="node" />
import { Octets } from "./octets";
import { Marshal } from "./marshal";
export declare class OctetsStream extends Octets {
    private static MAXSPARE;
    isLittleEndian: boolean;
    private pos;
    private tranpos;
    constructor(data?: number | Octets | Buffer);
    static wrap(paramOctets: Octets): OctetsStream;
    clone(): OctetsStream;
    eos(): boolean;
    get position(): number;
    getByteSequence(nBytes: number): Uint8Array;
    marshalByte(value: number): OctetsStream;
    unmarshalByte(): number;
    marshalUbyte(value: number): OctetsStream;
    unmarshalUbyte(): number;
    marshalBool(value: boolean): OctetsStream;
    unmarshalBool(): boolean;
    marshalInt(value: number): OctetsStream;
    unmarshalInt(): number;
    marshalUint(value: number): OctetsStream;
    unmarshalUint(): number;
    marshalShort(value: number): OctetsStream;
    unmarshalShort(): number;
    unmarshalUshort(): number;
    marshalUshort(value: number): OctetsStream;
    marshalLong(value: BigInt): OctetsStream;
    unmarshalLong(): BigInt;
    marshalDouble(value: number): OctetsStream;
    unmarshalDouble(): number;
    marshalUdouble(value: number): OctetsStream;
    unmarshalUdouble(): number;
    marshalFloat(value: number): OctetsStream;
    unmarshalFloat(): number;
    marshalUfloat(value: number): OctetsStream;
    unmarshalUfloat(): number;
    marshalString(value: string, encoding?: 'utf8' | 'utf16le'): OctetsStream;
    marshalOctets(octets: Octets): OctetsStream;
    marshal(stream: Marshal): OctetsStream;
    compactUint32(value: number): OctetsStream;
    compactSint32(value: number): OctetsStream;
    beginTransaction(): OctetsStream;
    rollback(): OctetsStream;
    commit(): OctetsStream;
    setPosition(pos: number): OctetsStream;
    unmarshalString(length?: number, encoing?: 'utf8' | 'utf16le'): string;
    uncompactUint32(): number;
    uncompactSint32(): number;
    unmarshalOctets(octets?: Octets): Octets;
    append(octets: Octets | Buffer): OctetsStream;
}
